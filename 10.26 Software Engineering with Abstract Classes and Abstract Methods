# 10.26 (Software Engineering with Abstract Classes and Abstract Methods)
""""""

from abc import abstractmethod, ABC

class Employee(ABC):
    """"""
    def __init__(self, first_name, last_name, ssn):
        self._first_name = first_name
        self._last_name = last_name
        self._ssn = ssn

    @property
    def first_name(self):
        return self._first_name    

    @property
    def last_name(self):
        return self._last_name

    @property
    def ssn(self):
        return self._ssn           

    @abstractmethod
    def earnings(self):
        raise NotImplementedError

    def __repr__(self):
        return (f'first name: {self._first_name}\n' +
                f'last name: {self._last_name}\n' +
                f'social security number: {self._ssn}\n')


class SalariedEmployee(Employee):
    def __init__(self, first_name, last_name, ssn, weekly_salary):
        super().__init__(first_name, last_name, ssn)
        self.weekly_salary = weekly_salary

    @property
    def weekly_salary(self):
        return self._weekly_salary

    @weekly_salary.setter
    def weekly_salary(self, weekly_salary):
        if not(weekly_salary >= 0):
            raise ValueError('weekly salary must be a positive number')
        self._weekly_salary = weekly_salary    

    def earnings(self):
        return self._weekly_salary

    def __repr__(self):
        return (super().__repr__() + f'weekly salary: {self._weekly_salary}\n')


class HourlyEmployee(Employee):    
    def __init__(self, first_name, last_name, ssn, hours, wages):
        super().__init__(first_name, last_name, ssn)
        self._hours = hours
        self._wages = wages

    @property
    def hours(self):
        return self._hours

    @hours.setter
    def hours(self, hours):
        if not(0 <= hours <= 168):
            raise ValueError('hours must be in the range (0-168)')
        self._hours = hours    

    @property
    def wages(self):
        return self._wages

    @wages.setter
    def wages(self, wages):
        if not(wages >= 0):
            raise ValueError('wages must be a positive number')
        self._wages = wages            

    def earnings(self):
        if self._hours <= 40:
            return self._wages * self._hours
        else:
            return self._wages * 40 + 1.5 * self._wages * (self._hours - 40) 

    def __repr__(self):
        return (super().__repr__() + f'hours: {self._hours}\n' +
                f'wages: {self._wages}\n')    
                
